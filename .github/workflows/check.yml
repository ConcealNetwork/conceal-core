name: Build check

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'            # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $ccx_ver = $sha.SubString(0,7)
          $release_name = "ccx-cli-win64-v$ccx_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 16 2019" -A x64 -DBOOST_ROOT="$env:BOOST_ROOT_1_69_0" ..
          msbuild concealX.sln /p:Configuration=Release /m
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=ccx_ver::${ccx_ver}"
          echo "::set-output name=artifact_path::$build_folder/src/Release/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu16:
    name: Ubuntu 16.04
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          BOOST_ROOT=
          sudo apt-get purge '*boost*'
          sudo apt install -y libboost-all-dev
          build_folder="build/debug"
          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-1604-v"$ccx_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../..
          make -j2
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18:
    name: Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          BOOST_ROOT=
          sudo apt-get purge '*boost*'
          sudo apt install -y libboost-all-dev
          build_folder="build/debug"
          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-1804-v"$ccx_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../..
          make -j2
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build-macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          build_folder="build/"
          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-1804-v"$ccx_ver"
          brew install gcc boost@1.60
          brew link boost@1.60 --force
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" ..
          make -j2
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          asset_path="./$build_folder$release_name.zip"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}